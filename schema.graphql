type User {
    user_id: ID!
    name: String!
    surname: String!
    email: String!
    is_admin: Boolean!
}

type Author {
    author_id: ID!
    name: String!
    surname: String!
}

type Publisher {
    publisher_id: ID!
    name: String!
}

type Rental {
    rental_id: ID!
    book: Book!
    user: User!
    start_date: Date!
    expected_end_date: Date!
    end_date: Date!
}

type Book {
    book_id: ID!
    location: Location!
    owner: User!
    author: Author!
    publisher: Publisher!
    title: String!
    isbn: String!
    edition: Int!
    is_free: Boolean!
    description_url: String!
}

type Location {
    location_id: ID!
    building: String!
    room: String!
}

input NewUser {
    name: String!
    surname: String!
    email: String!
    is_admin: Boolean!
}

input NewAuthor {
    name: String!
    surname: String!
}

input NewPublisher {
    name: String!
}

input NewRental {
    bookID: String!
    userID: String!
    start_date: Date!
    expected_end_date: Date!
    end_date: Date!
}

input NewBook {
    locationID: String!
    ownerID: String!
    authorID: String!
    publisherID: String!
    title: String!
    isbn: String!
    edition: Int!
    is_free: Boolean!
    description_url: String!
}

input NewLocation {
    building: String!
    room: String!
}

type Mutation {
    createPublisher(input: NewPublisher!): Publisher!
    createUser(input: NewUser!): User!
    deleteUser(user_id: ID!): ID!
}

type Query {
    users: [User!]!
    publishers: [Publisher!]!
}

scalar Date
scalar Timestamp